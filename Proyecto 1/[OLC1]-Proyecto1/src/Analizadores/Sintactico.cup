package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Structures.Instructions.*;
parser code {:
	/**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
   /**
     * Método al que se llama automáticamente ante algun error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    } 
    
    public LinkedList<Instruccion> getAST() {
        return AST;
    } 
:}

terminal String entero, decimal, cadena, booleano, caracter;
terminal String mas, menos, por, dividido, potencia, modulo;
terminal String parentesisAbre, parentesisCierra, corcheteAbre, corcheteCierra;
terminal String mayor, menor, mayorIgual, menorIgual, esIgual, esDiferente;
terminal String or, and, not;
terminal String t_inicio, t_fin;
terminal String comentarioSimple, comentarioMultiple;
terminal String ingresar, identificador, como, tipoDato, conValor, puntoycoma, coma;
terminal String flecha;
terminal String si, entonces, finSi, deLoContrario, oSi;
terminal String segun, hacer, interrogacionAbre, interrogacionCierra, finSegun;
terminal String para, hasta, finPara, con, incremental;
terminal String mientras, finMientras;
terminal String repetir, hastaQue;
terminal String retornar;
terminal String metodo, finMetodo, conParametros;
terminal String funcion, finFuncion, ejecutar;
terminal String imprimir, imprimirNl;
terminal String umenos;

non terminal INICIO, INSTRUCCIONESP;
non terminal LinkedList<Instruccion> INSTRUCCIONES, BLOQUE;
non terminal Instruccion INSTRUCCION;
non terminal DECLARACION, ASIGNACION, SI, DELOCONTRARIO, OSI, SEGUN, DELOCONTRARIOSEGUN, PARA, INCREMENTAL, MIENTRAS, REPETIR, RETORNAR, IMPRIMIR, IMPRIMIRNL;
non terminal Operacion EXPRESION;
non terminal LISTANOMBRES, LISTACONDICIONES, LISTASEGUN, LISTAPARAMETROS, LISTAEXPRESIONES, LISTAEXPRESIONESP;
non terminal METODO, CONPARAMETROS, FUNCION, LLAMADA;

precedence right mas, menos, or;
precedence right por, dividido, and;
precedence right modulo, potencia;
precedence left not, umenos;
precedence right mayor, menor, mayorIgual, menorIgual, esIgual, esDiferente;

start with INICIO;
INICIO::= INSTRUCCIONES:a {:System.out.println("Fin de analisis de entrada");:}
;
INSTRUCCIONES::= t_inicio INSTRUCCIONESP:a t_fin {::}
;
INSTRUCCIONESP::= INSTRUCCION:b INSTRUCCIONESP:a {:parser.AST.add(b);:}
| METODO INSTRUCCIONESP
| FUNCION INSTRUCCIONESP
| error INSTRUCCIONESP
|{:RESULT=new LinkedList<>();:}
;
BLOQUE::= INSTRUCCION BLOQUE
|
;
INSTRUCCION::= comentarioSimple:a {:RESULT=new ComentarioSimple(a);:}
| comentarioMultiple
| DECLARACION
| ASIGNACION
| SI
| SEGUN
| PARA
| MIENTRAS
| REPETIR
| LLAMADA puntoycoma
| IMPRIMIR
| IMPRIMIRNL
;

DECLARACION::= ingresar identificador LISTANOMBRES como tipoDato conValor EXPRESION puntoycoma
;

LISTANOMBRES::= coma identificador LISTANOMBRES
|
;

ASIGNACION::= identificador LISTANOMBRES flecha EXPRESION puntoycoma
;

SI::= si EXPRESION entonces BLOQUE LISTACONDICIONES DELOCONTRARIO finSi
;

DELOCONTRARIO::= deLoContrario BLOQUE
|
;

OSI::=
    oSi EXPRESION entonces BLOQUE 
;

LISTACONDICIONES::= OSI LISTACONDICIONES
|
;

SEGUN::= segun EXPRESION hacer LISTASEGUN DELOCONTRARIOSEGUN finSegun
;

LISTASEGUN::= interrogacionAbre EXPRESION interrogacionCierra entonces BLOQUE LISTASEGUN
|
;

DELOCONTRARIOSEGUN::= deLoContrario entonces BLOQUE
|
;

PARA::= para identificador flecha EXPRESION hasta EXPRESION INCREMENTAL hacer BLOQUE finPara
;

INCREMENTAL::= con incremental entero
|
;

MIENTRAS::= mientras EXPRESION hacer BLOQUE finMientras 
;

REPETIR::= repetir BLOQUE hastaQue EXPRESION
;

RETORNAR::= retornar EXPRESION puntoycoma
;

METODO::= metodo identificador CONPARAMETROS BLOQUE finMetodo
;

CONPARAMETROS::= conParametros parentesisAbre identificador tipoDato LISTAPARAMETROS parentesisCierra
|
;

LISTAPARAMETROS::= coma identificador tipoDato LISTAPARAMETROS
|
;

FUNCION::= funcion identificador tipoDato CONPARAMETROS BLOQUE RETORNAR finFuncion
;

EXPRESION::= EXPRESION mas EXPRESION
| menos EXPRESION %prec umenos
| EXPRESION menos EXPRESION
| EXPRESION por EXPRESION
| EXPRESION dividido EXPRESION
| EXPRESION potencia corcheteAbre EXPRESION corcheteCierra
| EXPRESION modulo EXPRESION
| parentesisAbre EXPRESION parentesisCierra
| EXPRESION mayor EXPRESION
| EXPRESION menor EXPRESION
| EXPRESION menorIgual EXPRESION
| EXPRESION mayorIgual EXPRESION
| EXPRESION esIgual EXPRESION
| EXPRESION esDiferente EXPRESION
| EXPRESION or EXPRESION
| EXPRESION and EXPRESION
| not EXPRESION
| entero
| decimal
| booleano
| cadena
| caracter
| identificador
| LLAMADA
;

LLAMADA::= ejecutar identificador parentesisAbre LISTAEXPRESIONES parentesisCierra
;
LISTAEXPRESIONES::= EXPRESION LISTAEXPRESIONESP
|
;
LISTAEXPRESIONESP::= coma EXPRESION LISTAEXPRESIONESP
|
;
IMPRIMIR::= imprimir EXPRESION puntoycoma
;
IMPRIMIR::= imprimirNl EXPRESION puntoycoma
;