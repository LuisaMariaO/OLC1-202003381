package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.AbstractMap;
import Structures.Instructions.*;
import Structures.Instructions.Operacion.Tipo_operacion;
parser code {:
	/**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
    public LinkedList<String> listaNombres = new LinkedList<String>();
    public LinkedList<Instruccion> bloque = new LinkedList<Instruccion>();
    public LinkedList<HashMap<Operacion,LinkedList<Instruccion>>> listaCondiciones = new LinkedList<HashMap<Operacion,LinkedList<Instruccion>>>();
    public HashMap<Operacion,LinkedList<Instruccion>> mapAux = new HashMap<Operacion,LinkedList<Instruccion>>();
    public LinkedList<Instruccion> bloqueContrario = new LinkedList<Instruccion>();
   /**
     * Método al que se llama automáticamente ante algun error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    } 
    
    public LinkedList<Instruccion> getAST() {
        return AST;
    } 
:}

terminal String entero, decimal, cadena, booleano, caracter;
terminal String mas, menos, por, dividido, potencia, modulo;
terminal String parentesisAbre, parentesisCierra, corcheteAbre, corcheteCierra;
terminal String mayor, menor, mayorIgual, menorIgual, esIgual, esDiferente;
terminal String or, and, not;
terminal String t_inicio, t_fin;
terminal String comentarioSimple, comentarioMultiple;
terminal String ingresar, identificador, como, tipoDato, conValor, puntoycoma, coma;
terminal String flecha;
terminal String si, entonces, finSi, deLoContrario, oSi;
terminal String segun, hacer, interrogacionAbre, interrogacionCierra, finSegun;
terminal String para, hasta, finPara, con, incremental;
terminal String mientras, finMientras;
terminal String repetir, hastaQue;
terminal String retornar;
terminal String metodo, finMetodo, conParametros;
terminal String funcion, finFuncion, ejecutar;
terminal String imprimir, imprimirNl;
terminal String umenos;

non terminal INICIO, INSTRUCCIONESP;
non terminal LinkedList<Instruccion> INSTRUCCIONES, BLOQUE, DELOCONTRARIO, BLOQUEP, DELOCONTRARIOSEGUN;
non terminal Instruccion INSTRUCCION, DECLARACION, ASIGNACION, SI, SEGUN, PARA, MIENTRAS, REPETIR, LLAMADA, IMPRIMIR, IMPRIMIRNL;
non terminal RETORNAR;
non terminal String INCREMENTAL;
non terminal Map.Entry<Operacion,LinkedList<Instruccion>> OSI,CONDICIONESEGUN;
non terminal Operacion EXPRESION;
non terminal LinkedList<Map.Entry<Operacion,LinkedList<Instruccion>>> LISTACONDICIONES,LISTASEGUN, CONDICIONES;
non terminal LinkedList<String> LISTANOMBRES; 
non terminal LISTAPARAMETROS;
non terminal LinkedList<Operacion> LISTAEXPRESIONES, LISTAEXPRESIONESP;
non terminal METODO, CONPARAMETROS, FUNCION;

precedence right mas, menos, or;
precedence right por, dividido, and;
precedence right modulo, potencia;
precedence left not, umenos;
precedence right mayor, menor, mayorIgual, menorIgual, esIgual, esDiferente;

start with INICIO;
INICIO::= INSTRUCCIONES:a {:System.out.println("Fin de analisis de entrada");:}
;
INSTRUCCIONES::= t_inicio INSTRUCCIONESP:a t_fin {::}
;
INSTRUCCIONESP::= INSTRUCCION:b INSTRUCCIONESP:a {:parser.AST.addFirst(b);:}
| METODO INSTRUCCIONESP
| FUNCION INSTRUCCIONESP
| error INSTRUCCIONESP
|{:RESULT=new LinkedList<>();:}
;
BLOQUEP::=BLOQUEP:a INSTRUCCION:b{:RESULT=a; a.add(b);:}
|INSTRUCCION:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

BLOQUE::=BLOQUEP:a{:RESULT=a;:}
|
;
INSTRUCCION::= comentarioSimple:a {:RESULT=new ComentarioSimple(a);:}
| comentarioMultiple:a {:RESULT=new ComentarioMultilinea(a);:}
| DECLARACION:a{:RESULT=a;:}
| ASIGNACION:a{:RESULT=a;:}
| SI:a{:RESULT=a;:}
| SEGUN:a{:RESULT=a;:}
| PARA:a{:RESULT=a;:}
| MIENTRAS:a{:RESULT=a;:}
| REPETIR:a{:RESULT=a;:}
| LLAMADA:a puntoycoma{:RESULT=a;:}
| IMPRIMIR:a{:RESULT=a;:}
| IMPRIMIRNL:a{:RESULT=a;:}
;

DECLARACION::= ingresar LISTANOMBRES:a como tipoDato:b conValor EXPRESION:c puntoycoma{:RESULT=new Declaracion(a,b,c);:}
;

LISTANOMBRES::= LISTANOMBRES:a coma identificador:b{:RESULT=a; a.add(b);:}
| identificador:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

ASIGNACION::= LISTANOMBRES:a flecha EXPRESION:b puntoycoma{:RESULT=new Asignacion(a,b);:}
;

SI::= si EXPRESION:a entonces BLOQUE:b CONDICIONES:c DELOCONTRARIO:d finSi{:RESULT=new If(a,b,c,d);:}
;

DELOCONTRARIO::= deLoContrario BLOQUE:a{:RESULT=a;:}
|
;


OSI::=
    oSi EXPRESION:a entonces BLOQUE:b{:RESULT=new  AbstractMap.SimpleEntry<Operacion, LinkedList<Instruccion>>(a, b);:}
;

LISTACONDICIONES::= LISTACONDICIONES:a OSI:b{:RESULT=a; a.add(b);:}
| OSI:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

CONDICIONES::= LISTACONDICIONES:a{:RESULT=a;:}
|
;
SEGUN::= segun EXPRESION:a hacer LISTASEGUN:b DELOCONTRARIOSEGUN:c finSegun{:RESULT= new Switch(a,b,c);:}
;

LISTASEGUN::= LISTASEGUN:a CONDICIONESEGUN:b{:RESULT=a; a.add(b);:}
|CONDICIONESEGUN:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

CONDICIONESEGUN::= interrogacionAbre EXPRESION:a interrogacionCierra entonces BLOQUE:b{:RESULT= new AbstractMap.SimpleEntry<Operacion,LinkedList<Instruccion>>(a,b);:}
;

DELOCONTRARIOSEGUN::= deLoContrario entonces BLOQUE:a{:RESULT=a;:}
|
;

PARA::= para identificador:a flecha EXPRESION:b hasta EXPRESION:c INCREMENTAL:d hacer BLOQUE:e finPara{:RESULT=new For(a,b,c,d,e);:}
;

INCREMENTAL::= con incremental entero:a{:RESULT=a;:}
|
;

MIENTRAS::= mientras EXPRESION:a hacer BLOQUE:b finMientras{:RESULT=new Mientras(a,b);:}
;

REPETIR::= repetir BLOQUE:a hastaQue EXPRESION:b{:RESULT=new Repetir(a,b);:}
;

RETORNAR::= retornar EXPRESION puntoycoma
;

METODO::= metodo identificador CONPARAMETROS BLOQUE finMetodo
;

CONPARAMETROS::= conParametros parentesisAbre identificador tipoDato LISTAPARAMETROS parentesisCierra
|
;

LISTAPARAMETROS::= coma identificador tipoDato LISTAPARAMETROS
|
;

FUNCION::= funcion identificador tipoDato CONPARAMETROS BLOQUE RETORNAR finFuncion
;

EXPRESION::= EXPRESION:a mas EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.SUMA);:}
| menos EXPRESION:a{:RESULT=new Operacion(a,Tipo_operacion.NEGATIVO);:} %prec umenos
| EXPRESION:a menos EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.RESTA);:}
| EXPRESION:a por EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.MULTIPLICACION);:}
| EXPRESION:a dividido EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.DIVISION);:}
| EXPRESION:a potencia corcheteAbre EXPRESION:b corcheteCierra{:RESULT=new Operacion(a,b,Tipo_operacion.POTENCIA);:}
| EXPRESION:a modulo EXPRESION:b {:RESULT=new Operacion(a,b,Tipo_operacion.MODULO);:}
| parentesisAbre EXPRESION:a parentesisCierra {:RESULT=new Operacion(a,Tipo_operacion.PARENTESIS);:}
| EXPRESION:a mayor EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.MAYOR);:}
| EXPRESION:a menor EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.MENOR);:}
| EXPRESION:a menorIgual EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.MENOR_IGUAL);:}
| EXPRESION:a mayorIgual EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.MAYOR_IGUAL);:}
| EXPRESION:a esIgual EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.IGUAL);:}
| EXPRESION:a esDiferente EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.DIFERENTE);:}
| EXPRESION:a or EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.OR);:}
| EXPRESION:a and EXPRESION:b{:RESULT=new Operacion(a,b,Tipo_operacion.AND);:}
| not EXPRESION:a{:RESULT=new Operacion(a,Tipo_operacion.NOT);:}
| entero:a{:RESULT=new Operacion(a,Tipo_operacion.ENTERO);:}
| decimal:a{:RESULT=new Operacion(a,Tipo_operacion.DECIMAL);:}
| booleano:a{:RESULT=new Operacion(a,Tipo_operacion.BOOLEAN);:}
| cadena:a{:RESULT=new Operacion(a,Tipo_operacion.CADENA);:}
| caracter:a{:RESULT=new Operacion(a,Tipo_operacion.CARACTER);:}
| identificador:a{:RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);:}
| LLAMADA:a{:RESULT=new Operacion(a,Tipo_operacion.LLAMADA);:}
;

LLAMADA::= ejecutar identificador:a parentesisAbre LISTAEXPRESIONES:b parentesisCierra{:RESULT=new Llamada(a,b);:}
;
LISTAEXPRESIONES::=LISTAEXPRESIONESP:a{:RESULT=a;:}
|
;
LISTAEXPRESIONESP::= LISTAEXPRESIONESP:a coma EXPRESION:b{:RESULT=a; a.add(b);:}
|EXPRESION:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;
IMPRIMIR::= imprimir EXPRESION:a puntoycoma{:RESULT=new Imprimir(a);:}
;
IMPRIMIR::= imprimirNl EXPRESION:a puntoycoma{:RESULT=new Imprimirnl(a);:}
;