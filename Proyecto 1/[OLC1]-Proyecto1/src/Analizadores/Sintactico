package analizadores; 
import java_cup.runtime.*;
import Structures.Instructions.Operacion;
import Structures.Instructions.Instruccion;
import java.util.LinkedList;
parser code 
{:

    public LinkedList<Instruccion> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:} 

terminal String t_numero,t_cadena,t_boolean,t_caracter;
terminal String mas, menos, por, dividido,potencia, corcheteAbre, corcheteCierra, mod, parentesisAbre, parentesisCierra;
terminal String umenos;
terminal string mayor, menor, mayorIgual, menorIgual, esIgual, esDiferente;
terminal String or, and, not;
terminal String inicio, fin;
terminal String comentarioSimple, comentarioMultiple;
terminal String ingresar, como, conValor, puntoycoma, coma;
terminal String flecha;
terminal String si, entonces, finSi, deLoContrario, oSi;
terminal String segun, interrogacionAbre, interrogacionCierra, finSegun;
terminal String para, hasta, hacer, incremental, finPara;
terminal String mientras, finMientras;
terminal String repetir, hastaQue;
terminal String retornar;
terminal String metodo, finMetodo, conParametros;
terminal String funcion, finFuncion;
terminal String ejecutar;
terminal String imprimir, imprimirNl;
terminal String entero, decimal, cadena, booleano, caracter,variable;

non terminal INICIO;
non terminal LinkedList<Instruccion> INSTRUCCIONES;
non terminal Instruccion INSTRUCCION;
non terminal Operacion EXPRESION;

precedence left mas, menos;
precedence left por, dividido, mod;
precedence left potencia;
precedence right umenos;
precedence left or, and;
precedence right not;
precedence left mayor,menor,mayorIgual,menorIgual,esIgual,esDiferente;


start with INICIO; 

INICIO::=INSTRUCCIONES:a{:
    parser.AST=a;
:};

INSTRUCCIONES ::= 
   INSTRUCCIONES:a INSTRUCCION:b{:RESULT=a; RESULT.add(b);:}
 | INSTRUCCION:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}

; 

INSTRUCCION ::= 
   EXPRESION:a{:System.out.println("El valor de la expresión es: "+a);:}
;

EXPRESION  ::= 
    menos EXPRESION:a                      {:RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);:} %prec umenos                 
 |  EXPRESION:a mas        EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}
 |  EXPRESION:a menos      EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
 |  EXPRESION:a por        EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
 |  EXPRESION:a dividido   EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
 |  EXPRESION:a potencia corcheteAbre EXPRESION:b corcheteCierra     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);:}
 |  EXPRESION:a mod   EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);:}
 |  parentesisAbre EXPRESION:a parentesisCierra               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.PARENTESIS);:}
 |  entero:a                               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.ENTERO);:}
 |  decimal:a                              {:RESULT=new Operacion(a,Operacion.Tipo_operacion.DECIMAL);:}
 |  cadena:a                               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);:}
 |  booleano:a                             {:RESULT=new Operacion(a,Operacion.Tipo_operacion.BOOLEAN);:}
 |  caracter:a                             {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);:}
 |  EXPRESION:a mayor        EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR);:}
 |  EXPRESION:a menor        EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR);:}
 |  EXPRESION:a mayorIgual       EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL);:}
 |  EXPRESION:a menorIgual       EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL);:}
 |  EXPRESION:a esIgual          EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL);:}
 |  EXPRESION:a esDiferente      EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE);:}
 |  EXPRESION:a or               EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);:}
 |  EXPRESION:a and              EXPRESION:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);:}
 |  not EXPRESION:a                  {:RESULT=new Operacion(a,Operacion.Tipo_operacion.NOT);:}
 |  variable:a                   {:RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICDOR);:}
;