
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\012\000\002\025\005\000" +
    "\002\025\002\000\002\007\007\000\002\010\011\000\002" +
    "\011\004\000\002\011\002\000\002\012\006\000\002\026" +
    "\004\000\002\026\002\000\002\013\010\000\002\027\010" +
    "\000\002\027\002\000\002\014\005\000\002\014\002\000" +
    "\002\015\014\000\002\016\005\000\002\016\002\000\002" +
    "\017\007\000\002\020\006\000\002\021\005\000\002\033" +
    "\007\000\002\034\010\000\002\034\002\000\002\030\006" +
    "\000\002\030\002\000\002\035\011\000\002\024\005\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\007\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\036\007\000\002\031\004\000\002\031\002\000" +
    "\002\032\005\000\002\032\002\000\002\022\005\000\002" +
    "\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\034\005\001\002\000\004\002\000\001" +
    "\002\000\042\003\035\035\ufffa\036\037\037\033\040\025" +
    "\041\042\050\040\055\024\062\015\067\021\071\016\074" +
    "\011\077\041\101\032\102\017\103\044\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\066\003" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\050\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\057\uffee\061\uffee\062" +
    "\uffee\064\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\077\uffee\101\uffee\102\uffee\103\uffee\001" +
    "\002\000\004\041\264\001\002\000\066\003\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\050\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\061\ufff4\062\ufff4\064\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\001\002\000\004" +
    "\045\263\001\002\000\066\003\035\035\ufffa\036\037\037" +
    "\033\040\025\041\042\050\040\052\ufffa\053\ufffa\054\ufffa" +
    "\055\024\057\ufffa\061\ufffa\062\015\064\ufffa\067\021\070" +
    "\ufffa\071\016\072\ufffa\073\ufffa\074\011\075\ufffa\077\041" +
    "\101\032\102\017\103\044\001\002\000\004\041\246\001" +
    "\002\000\042\003\035\036\037\037\033\040\025\041\042" +
    "\050\040\055\024\062\015\067\021\071\016\072\ufffa\074" +
    "\011\077\041\101\032\102\017\103\044\001\002\000\026" +
    "\004\054\005\051\006\047\007\055\010\053\012\052\017" +
    "\045\033\046\041\057\101\032\001\002\000\066\003\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\050\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7\062\ufff7" +
    "\064\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\077\ufff7\101\ufff7\102\ufff7\103\ufff7\001\002" +
    "\000\026\004\054\005\051\006\047\007\055\010\053\012" +
    "\052\017\045\033\046\041\057\101\032\001\002\000\066" +
    "\003\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\050" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\057\uffef\061\uffef" +
    "\062\uffef\064\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\077\uffef\101\uffef\102\uffef\103\uffef" +
    "\001\002\000\066\003\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\057\ufff3\061\ufff3\062\ufff3\064\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\101\ufff3" +
    "\102\ufff3\103\ufff3\001\002\000\026\004\054\005\051\006" +
    "\047\007\055\010\053\012\052\017\045\033\046\041\057" +
    "\101\032\001\002\000\004\041\210\001\002\000\066\003" +
    "\035\035\ufffa\036\037\037\033\040\025\041\042\050\040" +
    "\052\ufffa\053\ufffa\054\ufffa\055\024\057\ufffa\061\ufffa\062" +
    "\015\064\ufffa\067\021\070\ufffa\071\016\072\ufffa\073\ufffa" +
    "\074\011\075\ufffa\077\041\101\032\102\017\103\044\001" +
    "\002\000\066\003\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\050\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\061\ufff6\062\ufff6\064\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6\101\ufff6\102" +
    "\ufff6\103\ufff6\001\002\000\004\035\206\001\002\000\066" +
    "\003\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\050" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\061\ufff5" +
    "\062\ufff5\064\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\077\ufff5\101\ufff5\102\ufff5\103\ufff5" +
    "\001\002\000\004\041\175\001\002\000\066\003\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\050\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\057\ufff8\061\ufff8\062\ufff8\064" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\077\ufff8\101\ufff8\102\ufff8\103\ufff8\001\002\000" +
    "\066\003\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\050\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\061" +
    "\ufff1\062\ufff1\064\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\075\ufff1\077\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\001\002\000\066\003\035\035\ufffa\036\037\037\033" +
    "\040\025\041\042\050\040\052\ufffa\053\ufffa\054\ufffa\055" +
    "\024\057\ufffa\061\ufffa\062\015\064\ufffa\067\021\070\ufffa" +
    "\071\016\072\ufffa\073\ufffa\074\011\075\ufffa\077\041\101" +
    "\032\102\017\103\044\001\002\000\066\003\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\050\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002\000\066" +
    "\003\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\050" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9\061\ufff9" +
    "\062\ufff9\064\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\001\002\000\026\004\054\005\051\006\047\007\055\010" +
    "\053\012\052\017\045\033\046\041\057\101\032\001\002" +
    "\000\004\041\133\001\002\000\006\046\125\047\uffeb\001" +
    "\002\000\066\003\035\035\ufffa\036\037\037\033\040\025" +
    "\041\042\050\040\052\ufffa\053\ufffa\054\ufffa\055\024\057" +
    "\ufffa\061\ufffa\062\015\064\ufffa\067\021\070\ufffa\071\016" +
    "\072\ufffa\073\ufffa\074\011\075\ufffa\077\041\101\032\102" +
    "\017\103\044\001\002\000\026\004\054\005\051\006\047" +
    "\007\055\010\053\012\052\017\045\033\046\041\057\101" +
    "\032\001\002\000\026\004\054\005\051\006\047\007\055" +
    "\010\053\012\052\017\045\033\046\041\057\101\032\001" +
    "\002\000\026\004\054\005\051\006\047\007\055\010\053" +
    "\012\052\017\045\033\046\041\057\101\032\001\002\000" +
    "\144\003\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\045\uffbe\046\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\077\uffbe\101\uffbe\102\uffbe\103\uffbe\001\002\000\144\003" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\020\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\077\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\001\002\000\144\003\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\077\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\001\002\000\026\004\054\005\051\006" +
    "\047\007\055\010\053\012\052\017\045\033\046\041\057" +
    "\101\032\001\002\000\144\003\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\001\002\000\144\003\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\045\uffc1\046\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\077\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002" +
    "\000\144\003\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\077\uffbf\101\uffbf\102\uffbf\103\uffbf\001\002\000\040" +
    "\011\076\012\064\013\073\014\062\015\060\016\072\023" +
    "\075\024\066\025\061\026\071\027\074\030\067\031\063" +
    "\032\065\045\070\001\002\000\144\003\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\074\uffbc\075\uffbc\077\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\001\002\000\004\021\114\001\002\000\026\004" +
    "\054\005\051\006\047\007\055\010\053\012\052\017\045" +
    "\033\046\041\057\101\032\001\002\000\026\004\054\005" +
    "\051\006\047\007\055\010\053\012\052\017\045\033\046" +
    "\041\057\101\032\001\002\000\026\004\054\005\051\006" +
    "\047\007\055\010\053\012\052\017\045\033\046\041\057" +
    "\101\032\001\002\000\026\004\054\005\051\006\047\007" +
    "\055\010\053\012\052\017\045\033\046\041\057\101\032" +
    "\001\002\000\026\004\054\005\051\006\047\007\055\010" +
    "\053\012\052\017\045\033\046\041\057\101\032\001\002" +
    "\000\026\004\054\005\051\006\047\007\055\010\053\012" +
    "\052\017\045\033\046\041\057\101\032\001\002\000\026" +
    "\004\054\005\051\006\047\007\055\010\053\012\052\017" +
    "\045\033\046\041\057\101\032\001\002\000\066\003\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\050\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4\061\uffb4\062\uffb4" +
    "\064\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4\001\002" +
    "\000\026\004\054\005\051\006\047\007\055\010\053\012" +
    "\052\017\045\033\046\041\057\101\032\001\002\000\026" +
    "\004\054\005\051\006\047\007\055\010\053\012\052\017" +
    "\045\033\046\041\057\101\032\001\002\000\026\004\054" +
    "\005\051\006\047\007\055\010\053\012\052\017\045\033" +
    "\046\041\057\101\032\001\002\000\026\004\054\005\051" +
    "\006\047\007\055\010\053\012\052\017\045\033\046\041" +
    "\057\101\032\001\002\000\026\004\054\005\051\006\047" +
    "\007\055\010\053\012\052\017\045\033\046\041\057\101" +
    "\032\001\002\000\026\004\054\005\051\006\047\007\055" +
    "\010\053\012\052\017\045\033\046\041\057\101\032\001" +
    "\002\000\144\003\uffd2\011\076\012\064\013\073\014\062" +
    "\015\060\016\072\020\uffd2\022\uffd2\023\075\024\066\025" +
    "\061\026\071\027\074\030\067\031\063\032\065\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2\001\002\000" +
    "\144\003\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\020\uffca\022\uffca\023\075\024\066\025\061\026" +
    "\071\027\074\030\067\031\uffca\032\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\077\uffca\101\uffca\102\uffca\103\uffca\001\002\000\144\003" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\020\uffc6\022\uffc6\023\075\024\066\025\061\026\071\027" +
    "\074\030\067\031\uffc6\032\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\077\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\001\002\000\144\003\uffcf\011" +
    "\uffcf\012\uffcf\013\073\014\062\015\060\016\072\020\uffcf" +
    "\022\uffcf\023\075\024\066\025\061\026\071\027\074\030" +
    "\067\031\uffcf\032\065\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\077\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\001\002\000\144\003\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\060\016\072\020\uffcc\022\uffcc" +
    "\023\075\024\066\025\061\026\071\027\074\030\067\031" +
    "\uffcc\032\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\077\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\001\002\000\144\003\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\022\uffc8\023\075" +
    "\024\066\025\061\026\071\027\074\030\067\031\uffc8\032" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\045\uffc8" +
    "\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\001\002\000\144\003\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\023\075\024\066" +
    "\025\061\026\071\027\074\030\067\031\uffc5\032\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\077\uffc5\101\uffc5\102\uffc5\103\uffc5\001\002" +
    "\000\144\003\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\020\uffc9\022\uffc9\023\075\024\066\025\061" +
    "\026\071\027\074\030\067\031\uffc9\032\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\045\uffc9\046\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\001\002\000\144" +
    "\003\uffc3\011\uffc3\012\uffc3\013\073\014\062\015\060\016" +
    "\072\020\uffc3\022\uffc3\023\075\024\066\025\061\026\071" +
    "\027\074\030\067\031\uffc3\032\065\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\077" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\001\002\000\144\003\uffd0" +
    "\011\076\012\064\013\073\014\062\015\060\016\072\020" +
    "\uffd0\022\uffd0\023\075\024\066\025\061\026\071\027\074" +
    "\030\067\031\063\032\065\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\077\uffd0\101" +
    "\uffd0\102\uffd0\103\uffd0\001\002\000\144\003\uffc4\011\076" +
    "\012\064\013\073\014\062\015\060\016\072\020\uffc4\022" +
    "\uffc4\023\075\024\066\025\061\026\071\027\074\030\067" +
    "\031\063\032\065\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\077\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\001\002\000\144\003\uffce\011\uffce\012\uffce" +
    "\013\073\014\062\015\060\016\072\020\uffce\022\uffce\023" +
    "\075\024\066\025\061\026\071\027\074\030\067\031\uffce" +
    "\032\065\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\045" +
    "\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\067\uffce\070\uffce\071\uffce\072\uffce" +
    "\073\uffce\074\uffce\075\uffce\077\uffce\101\uffce\102\uffce\103" +
    "\uffce\001\002\000\144\003\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\020\uffc7\022\uffc7\023\075\024" +
    "\066\025\061\026\071\027\074\030\067\031\uffc7\032\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\045\uffc7\046" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\077\uffc7\101\uffc7\102\uffc7\103\uffc7\001" +
    "\002\000\026\004\054\005\051\006\047\007\055\010\053" +
    "\012\052\017\045\033\046\041\057\101\032\001\002\000" +
    "\040\011\076\012\064\013\073\014\062\015\060\016\072" +
    "\022\116\023\075\024\066\025\061\026\071\027\074\030" +
    "\067\031\063\032\065\001\002\000\144\003\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\077\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\001\002\000\144\003\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\022\uffd1\023" +
    "\075\024\066\025\061\026\071\027\074\030\067\031\uffd1" +
    "\032\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045" +
    "\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\077\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\001\002\000\144\003\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2\023\075\024" +
    "\066\025\061\026\071\027\074\030\067\031\uffc2\032\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\045\uffc2\046" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\001" +
    "\002\000\040\011\076\012\064\013\073\014\062\015\060" +
    "\016\072\020\122\023\075\024\066\025\061\026\071\027" +
    "\074\030\067\031\063\032\065\001\002\000\144\003\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\077\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\001\002\000\030\035\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\057\ufffc\061\ufffc\064\ufffc\070\ufffc\072" +
    "\ufffc\073\ufffc\075\ufffc\001\002\000\004\047\130\001\002" +
    "\000\004\041\126\001\002\000\010\042\uffeb\046\125\047" +
    "\uffeb\001\002\000\006\042\uffec\047\uffec\001\002\000\026" +
    "\004\054\005\051\006\047\007\055\010\053\012\052\017" +
    "\045\033\046\041\057\101\032\001\002\000\040\011\076" +
    "\012\064\013\073\014\062\015\060\016\072\023\075\024" +
    "\066\025\061\026\071\027\074\030\067\031\063\032\065" +
    "\045\132\001\002\000\066\003\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\050\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\057\uffea\061\uffea\062\uffea\064\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\077\uffea" +
    "\101\uffea\102\uffea\103\uffea\001\002\000\004\043\134\001" +
    "\002\000\044\003\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\050\uffd6\055\uffd6\062\uffd6\067\uffd6\071\uffd6\073\uffd6\074" +
    "\uffd6\076\135\077\uffd6\101\uffd6\102\uffd6\103\uffd6\001\002" +
    "\000\004\017\145\001\002\000\042\003\035\036\037\037" +
    "\033\040\025\041\042\050\040\055\024\062\015\067\021" +
    "\071\016\073\ufffa\074\011\077\041\101\032\102\017\103" +
    "\044\001\002\000\004\073\141\001\002\000\004\100\144" +
    "\001\002\000\026\004\054\005\051\006\047\007\055\010" +
    "\053\012\052\017\045\033\046\041\057\101\032\001\002" +
    "\000\040\011\076\012\064\013\073\014\062\015\060\016" +
    "\072\023\075\024\066\025\061\026\071\027\074\030\067" +
    "\031\063\032\065\045\143\001\002\000\004\100\uffd9\001" +
    "\002\000\066\003\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\050\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\061\uffd3\062\uffd3\064\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\077\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\001\002\000\004\041\146\001\002\000\004" +
    "\043\147\001\002\000\006\020\uffd4\046\151\001\002\000" +
    "\004\020\155\001\002\000\004\041\152\001\002\000\004" +
    "\043\153\001\002\000\006\020\uffd4\046\151\001\002\000" +
    "\004\020\uffd5\001\002\000\044\003\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\050\uffd7\055\uffd7\062\uffd7\067\uffd7\071" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\077\uffd7\101\uffd7\102\uffd7" +
    "\103\uffd7\001\002\000\040\011\076\012\064\013\073\014" +
    "\062\015\060\016\072\023\075\024\066\025\061\026\071" +
    "\027\074\030\067\031\063\032\065\051\157\001\002\000" +
    "\046\003\035\036\037\037\033\040\025\041\042\050\040" +
    "\052\ufffa\053\ufffa\054\ufffa\055\024\062\015\067\021\071" +
    "\016\074\011\077\041\101\032\102\017\103\044\001\002" +
    "\000\010\052\uffe4\053\uffe4\054\161\001\002\000\026\004" +
    "\054\005\051\006\047\007\055\010\053\012\052\017\045" +
    "\033\046\041\057\101\032\001\002\000\006\052\uffe7\053" +
    "\166\001\002\000\010\052\uffe4\053\uffe4\054\161\001\002" +
    "\000\006\052\uffe5\053\uffe5\001\002\000\004\052\170\001" +
    "\002\000\042\003\035\036\037\037\033\040\025\041\042" +
    "\050\040\052\ufffa\055\024\062\015\067\021\071\016\074" +
    "\011\077\041\101\032\102\017\103\044\001\002\000\004" +
    "\052\uffe8\001\002\000\066\003\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\050\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\057\uffe9\061\uffe9\062\uffe9\064\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\077\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\001\002\000\040\011\076\012" +
    "\064\013\073\014\062\015\060\016\072\023\075\024\066" +
    "\025\061\026\071\027\074\030\067\031\063\032\065\051" +
    "\172\001\002\000\046\003\035\036\037\037\033\040\025" +
    "\041\042\050\040\052\ufffa\053\ufffa\054\ufffa\055\024\062" +
    "\015\067\021\071\016\074\011\077\041\101\032\102\017" +
    "\103\044\001\002\000\010\052\uffe6\053\uffe6\054\uffe6\001" +
    "\002\000\030\035\ufffb\052\ufffb\053\ufffb\054\ufffb\057\ufffb" +
    "\061\ufffb\064\ufffb\070\ufffb\072\ufffb\073\ufffb\075\ufffb\001" +
    "\002\000\004\017\176\001\002\000\030\004\054\005\051" +
    "\006\047\007\055\010\053\012\052\017\045\020\uffb8\033" +
    "\046\041\057\101\032\001\002\000\004\020\205\001\002" +
    "\000\042\011\076\012\064\013\073\014\062\015\060\016" +
    "\072\020\uffb6\023\075\024\066\025\061\026\071\027\074" +
    "\030\067\031\063\032\065\046\201\001\002\000\026\004" +
    "\054\005\051\006\047\007\055\010\053\012\052\017\045" +
    "\033\046\041\057\101\032\001\002\000\004\020\uffb9\001" +
    "\002\000\042\011\076\012\064\013\073\014\062\015\060" +
    "\016\072\020\uffb6\023\075\024\066\025\061\026\071\027" +
    "\074\030\067\031\063\032\065\046\201\001\002\000\004" +
    "\020\uffb7\001\002\000\144\003\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\045\uffba" +
    "\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\074\uffba\075\uffba\077\uffba\101\uffba\102\uffba\103\uffba" +
    "\001\002\000\004\002\uffff\001\002\000\030\035\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\057\ufffd\061\ufffd\064\ufffd\070\ufffd" +
    "\072\ufffd\073\ufffd\075\ufffd\001\002\000\006\042\uffeb\046" +
    "\125\001\002\000\004\042\212\001\002\000\004\043\213" +
    "\001\002\000\004\044\214\001\002\000\026\004\054\005" +
    "\051\006\047\007\055\010\053\012\052\017\045\033\046" +
    "\041\057\101\032\001\002\000\040\011\076\012\064\013" +
    "\073\014\062\015\060\016\072\023\075\024\066\025\061" +
    "\026\071\027\074\030\067\031\063\032\065\045\216\001" +
    "\002\000\066\003\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\050\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057" +
    "\uffed\061\uffed\062\uffed\064\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed\101\uffed\102" +
    "\uffed\103\uffed\001\002\000\040\011\076\012\064\013\073" +
    "\014\062\015\060\016\072\023\075\024\066\025\061\026" +
    "\071\027\074\030\067\031\063\032\065\056\220\001\002" +
    "\000\010\053\uffe1\057\221\061\uffe1\001\002\000\026\004" +
    "\054\005\051\006\047\007\055\010\053\012\052\017\045" +
    "\033\046\041\057\101\032\001\002\000\006\053\223\061" +
    "\uffdf\001\002\000\004\051\226\001\002\000\004\061\225" +
    "\001\002\000\066\003\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\050\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\057\uffe3\061\uffe3\062\uffe3\064\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\001\002\000\042\003\035\036\037\037" +
    "\033\040\025\041\042\050\040\055\024\061\ufffa\062\015" +
    "\067\021\071\016\074\011\077\041\101\032\102\017\103" +
    "\044\001\002\000\004\061\uffe0\001\002\000\040\011\076" +
    "\012\064\013\073\014\062\015\060\016\072\023\075\024" +
    "\066\025\061\026\071\027\074\030\067\031\063\032\065" +
    "\060\231\001\002\000\004\051\232\001\002\000\046\003" +
    "\035\036\037\037\033\040\025\041\042\050\040\053\ufffa" +
    "\055\024\057\ufffa\061\ufffa\062\015\067\021\071\016\074" +
    "\011\077\041\101\032\102\017\103\044\001\002\000\010" +
    "\053\uffe1\057\221\061\uffe1\001\002\000\006\053\uffe2\061" +
    "\uffe2\001\002\000\040\011\076\012\064\013\073\014\062" +
    "\015\060\016\072\023\075\024\066\025\061\026\071\027" +
    "\074\030\067\031\063\032\065\056\236\001\002\000\042" +
    "\003\035\036\037\037\033\040\025\041\042\050\040\055" +
    "\024\062\015\067\021\070\ufffa\071\016\074\011\077\041" +
    "\101\032\102\017\103\044\001\002\000\004\070\240\001" +
    "\002\000\066\003\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\050\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057" +
    "\uffdb\061\uffdb\062\uffdb\064\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\077\uffdb\101\uffdb\102" +
    "\uffdb\103\uffdb\001\002\000\040\011\076\012\064\013\073" +
    "\014\062\015\060\016\072\023\075\024\066\025\061\026" +
    "\071\027\074\030\067\031\063\032\065\045\242\001\002" +
    "\000\066\003\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5" +
    "\061\uffb5\062\uffb5\064\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\077\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\001\002\000\004\072\244\001\002\000\026\004" +
    "\054\005\051\006\047\007\055\010\053\012\052\017\045" +
    "\033\046\041\057\101\032\001\002\000\122\003\uffda\011" +
    "\076\012\064\013\073\014\062\015\060\016\072\023\075" +
    "\024\066\025\061\026\071\027\074\030\067\031\063\032" +
    "\065\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\050\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda\061\uffda\062" +
    "\uffda\064\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\077\uffda\101\uffda\102\uffda\103\uffda\001" +
    "\002\000\004\047\247\001\002\000\026\004\054\005\051" +
    "\006\047\007\055\010\053\012\052\017\045\033\046\041" +
    "\057\101\032\001\002\000\040\011\076\012\064\013\073" +
    "\014\062\015\060\016\072\023\075\024\066\025\061\026" +
    "\071\027\074\030\067\031\063\032\065\063\251\001\002" +
    "\000\026\004\054\005\051\006\047\007\055\010\053\012" +
    "\052\017\045\033\046\041\057\101\032\001\002\000\042" +
    "\011\076\012\064\013\073\014\062\015\060\016\072\023" +
    "\075\024\066\025\061\026\071\027\074\030\067\031\063" +
    "\032\065\056\uffdc\065\253\001\002\000\004\066\260\001" +
    "\002\000\004\056\255\001\002\000\042\003\035\036\037" +
    "\037\033\040\025\041\042\050\040\055\024\062\015\064" +
    "\ufffa\067\021\071\016\074\011\077\041\101\032\102\017" +
    "\103\044\001\002\000\004\064\257\001\002\000\066\003" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\050\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\057\uffde\061\uffde\062" +
    "\uffde\064\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\077\uffde\101\uffde\102\uffde\103\uffde\001" +
    "\002\000\004\004\261\001\002\000\004\056\uffdd\001\002" +
    "\000\030\035\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\061" +
    "\ufffe\064\ufffe\070\ufffe\072\ufffe\073\ufffe\075\ufffe\001\002" +
    "\000\066\003\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\050\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057\ufff0" +
    "\061\ufff0\062\ufff0\064\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\077\ufff0\101\ufff0\102\ufff0" +
    "\103\ufff0\001\002\000\044\003\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\050\uffd6\055\uffd6\062\uffd6\067\uffd6\071\uffd6" +
    "\074\uffd6\075\uffd6\076\135\077\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\001\002\000\042\003\035\036\037\037\033\040\025" +
    "\041\042\050\040\055\024\062\015\067\021\071\016\074" +
    "\011\075\ufffa\077\041\101\032\102\017\103\044\001\002" +
    "\000\004\075\267\001\002\000\066\003\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\050\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\057\uffd8\061\uffd8\062\uffd8\064\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\077\uffd8\101\uffd8\102\uffd8\103\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\036\004\027\005\013\006\017\007\026\010\030" +
    "\013\011\015\022\017\035\020\033\022\021\023\007\033" +
    "\025\035\042\036\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\261\005\013\006\017" +
    "\007\026\010\030\013\011\015\022\017\035\020\033\022" +
    "\021\023\007\033\025\035\042\036\012\001\001\000\002" +
    "\001\001\000\036\004\242\005\013\006\017\007\026\010" +
    "\030\013\011\015\022\017\035\020\033\022\021\023\007" +
    "\033\025\035\042\036\012\001\001\000\006\024\240\036" +
    "\047\001\001\000\002\001\001\000\006\024\234\036\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\216\036\047\001\001\000\002\001\001\000\036\004\206" +
    "\005\013\006\017\007\026\010\030\013\011\015\022\017" +
    "\035\020\033\022\021\023\007\033\025\035\042\036\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\173\005\013\006\017\007\026\010\030\013" +
    "\011\015\022\017\035\020\033\022\021\023\007\033\025" +
    "\035\042\036\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\155\036\047\001\001\000\002\001\001" +
    "\000\004\025\123\001\001\000\036\004\122\005\013\006" +
    "\017\007\026\010\030\013\011\015\022\017\035\020\033" +
    "\022\021\023\007\033\025\035\042\036\012\001\001\000" +
    "\006\024\055\036\047\001\001\000\006\024\120\036\047" +
    "\001\001\000\006\024\117\036\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\116" +
    "\036\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\112\036\047\001\001\000\006\024" +
    "\111\036\047\001\001\000\006\024\110\036\047\001\001" +
    "\000\006\024\107\036\047\001\001\000\006\024\106\036" +
    "\047\001\001\000\006\024\105\036\047\001\001\000\006" +
    "\024\104\036\047\001\001\000\002\001\001\000\006\024" +
    "\103\036\047\001\001\000\006\024\102\036\047\001\001" +
    "\000\006\024\101\036\047\001\001\000\006\024\100\036" +
    "\047\001\001\000\006\024\077\036\047\001\001\000\006" +
    "\024\076\036\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\114\036\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\126\001\001\000\002\001\001\000\006\024\130\036" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\135\001\001\000\002\001\001\000" +
    "\036\004\136\005\013\006\017\007\026\010\030\013\011" +
    "\015\022\017\035\020\033\022\021\023\007\033\025\035" +
    "\042\036\012\001\001\000\004\021\137\001\001\000\002" +
    "\001\001\000\006\024\141\036\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\157\005\013\006\017\007\026\010\030" +
    "\013\011\015\022\017\035\020\033\022\021\023\007\033" +
    "\025\035\042\036\012\001\001\000\006\012\162\026\161" +
    "\001\001\000\006\024\170\036\047\001\001\000\004\011" +
    "\164\001\001\000\006\012\162\026\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\166\005\013\006" +
    "\017\007\026\010\030\013\011\015\022\017\035\020\033" +
    "\022\021\023\007\033\025\035\042\036\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\172\005\013\006\017\007\026\010\030\013\011\015" +
    "\022\017\035\020\033\022\021\023\007\033\025\035\042" +
    "\036\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\177\031\176\036\047\001\001" +
    "\000\002\001\001\000\004\032\201\001\001\000\006\024" +
    "\202\036\047\001\001\000\002\001\001\000\004\032\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\214\036\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\221\001\001\000\006\024" +
    "\227\036\047\001\001\000\004\014\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\226\005\013\006\017\007\026\010\030\013\011\015\022" +
    "\017\035\020\033\022\021\023\007\033\025\035\042\036" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\232\005\013\006\017\007\026\010" +
    "\030\013\011\015\022\017\035\020\033\022\021\023\007" +
    "\033\025\035\042\036\012\001\001\000\004\027\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\236" +
    "\005\013\006\017\007\026\010\030\013\011\015\022\017" +
    "\035\020\033\022\021\023\007\033\025\035\042\036\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\244" +
    "\036\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\247\036\047\001\001\000\002\001\001\000\006" +
    "\024\251\036\047\001\001\000\004\016\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\255\005\013" +
    "\006\017\007\026\010\030\013\011\015\022\017\035\020" +
    "\033\022\021\023\007\033\025\035\042\036\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\264\001\001\000\036\004\265\005\013\006\017\007" +
    "\026\010\030\013\011\015\022\017\035\020\033\022\021" +
    "\023\007\033\025\035\042\036\012\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= t_inicio INSTRUCCIONESP t_fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONESP ::= INSTRUCCION INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONESP ::= METODO INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONESP ::= FUNCION INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONESP ::= error INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONESP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= comentarioSimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= comentarioMultiple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= LLAMADA puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= IMPRIMIRNL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= ingresar identificador LISTANOMBRES como tipoDato conValor EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTANOMBRES ::= coma identificador LISTANOMBRES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTANOMBRES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTANOMBRES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTANOMBRES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= identificador LISTANOMBRES flecha EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SI ::= si EXPRESION entonces INSTRUCCIONESP LISTACONDICIONES DELOCONTRARIO finSi 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DELOCONTRARIO ::= deLoContrario INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DELOCONTRARIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OSI ::= oSi EXPRESION entonces INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OSI",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTACONDICIONES ::= OSI LISTACONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACONDICIONES",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTACONDICIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACONDICIONES",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SEGUN ::= segun EXPRESION hacer LISTASEGUN DELOCONTRARIOSEGUN finSegun 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTASEGUN ::= interrogacionAbre EXPRESION interrogacionCierra entonces INSTRUCCIONESP LISTASEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASEGUN",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTASEGUN ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASEGUN",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DELOCONTRARIOSEGUN ::= deLoContrario entonces INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIOSEGUN",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DELOCONTRARIOSEGUN ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIOSEGUN",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARA ::= para identificador flecha EXPRESION hasta EXPRESION INCREMENTAL hacer INSTRUCCIONESP finPara 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INCREMENTAL ::= con incremental entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INCREMENTAL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MIENTRAS ::= mientras EXPRESION hacer INSTRUCCIONESP finMientras 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REPETIR ::= repetir INSTRUCCIONESP hastaQue EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNAR ::= retornar EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO ::= metodo identificador CONPARAMETROS INSTRUCCIONESP finMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONPARAMETROS ::= conParametros parentesisAbre identificador tipoDato LISTAPARAMETROS parentesisCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONPARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONPARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONPARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAPARAMETROS ::= coma identificador tipoDato LISTAPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAPARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion identificador tipoDato CONPARAMETROS INSTRUCCIONESP RETORNAR finFuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= menos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION dividido EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION potencia corcheteAbre EXPRESION corcheteCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= parentesisAbre EXPRESION parentesisCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION menorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION mayorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION esIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION esDiferente EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= caracter 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LLAMADA ::= ejecutar identificador parentesisAbre LISTAEXPRESIONES parentesisCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTAEXPRESIONES ::= EXPRESION LISTAEXPRESIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTAEXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTAEXPRESIONESP ::= coma EXPRESION LISTAEXPRESIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONESP",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTAEXPRESIONESP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONESP",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IMPRIMIR ::= imprimir EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPRIMIR ::= imprimirNl EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
