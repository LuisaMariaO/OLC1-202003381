
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\012\000\002" +
    "\015\005\000\002\015\002\000\002\007\007\000\002\010" +
    "\011\000\002\011\004\000\002\011\002\000\002\012\006" +
    "\000\002\016\004\000\002\016\002\000\002\013\010\000" +
    "\002\017\010\000\002\017\002\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\007\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\034\005\001\002\000\004\002\000\001" +
    "\002\000\020\035\ufffd\036\015\037\016\040\020\041\023" +
    "\050\014\055\017\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\032\035\ufffd\036\015\037\016" +
    "\040\020\041\023\050\014\052\ufffd\053\ufffd\054\ufffd\055" +
    "\017\057\ufffd\061\ufffd\001\002\000\004\035\144\001\002" +
    "\000\032\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\050" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7" +
    "\001\002\000\032\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa" +
    "\061\ufffa\001\002\000\022\004\036\005\034\006\033\007" +
    "\037\010\035\017\031\033\032\041\041\001\002\000\032" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\050\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\057\ufffc\061\ufffc\001\002" +
    "\000\032\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\050" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb\061\ufffb" +
    "\001\002\000\022\004\036\005\034\006\033\007\037\010" +
    "\035\017\031\033\032\041\041\001\002\000\004\041\104" +
    "\001\002\000\032\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9" +
    "\061\ufff9\001\002\000\032\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\057\ufff8\061\ufff8\001\002\000\006\046\025\047\ufff4\001" +
    "\002\000\004\047\030\001\002\000\004\041\026\001\002" +
    "\000\010\042\ufff4\046\025\047\ufff4\001\002\000\006\042" +
    "\ufff5\047\ufff5\001\002\000\022\004\036\005\034\006\033" +
    "\007\037\010\035\017\031\033\032\041\041\001\002\000" +
    "\022\004\036\005\034\006\033\007\037\010\035\017\031" +
    "\033\032\041\041\001\002\000\022\004\036\005\034\006" +
    "\033\007\037\010\035\017\031\033\032\041\041\001\002" +
    "\000\052\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\045\uffd6\051\uffd6\056" +
    "\uffd6\060\uffd6\001\002\000\052\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\045\uffd8\051\uffd8\056\uffd8\060\uffd8\001\002\000\052\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\045\uffd5\051\uffd5\056\uffd5\060\uffd5" +
    "\001\002\000\052\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\045\uffd9\051" +
    "\uffd9\056\uffd9\060\uffd9\001\002\000\052\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\045\uffd7\051\uffd7\056\uffd7\060\uffd7\001\002\000" +
    "\040\011\057\012\047\013\055\014\044\015\042\016\054" +
    "\023\060\024\050\025\043\026\053\027\056\030\051\031" +
    "\045\032\046\045\052\001\002\000\052\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\045\uffd4\051\uffd4\056\uffd4\060\uffd4\001\002\000" +
    "\004\021\076\001\002\000\022\004\036\005\034\006\033" +
    "\007\037\010\035\017\031\033\032\041\041\001\002\000" +
    "\022\004\036\005\034\006\033\007\037\010\035\017\031" +
    "\033\032\041\041\001\002\000\022\004\036\005\034\006" +
    "\033\007\037\010\035\017\031\033\032\041\041\001\002" +
    "\000\022\004\036\005\034\006\033\007\037\010\035\017" +
    "\031\033\032\041\041\001\002\000\022\004\036\005\034" +
    "\006\033\007\037\010\035\017\031\033\032\041\041\001" +
    "\002\000\022\004\036\005\034\006\033\007\037\010\035" +
    "\017\031\033\032\041\041\001\002\000\022\004\036\005" +
    "\034\006\033\007\037\010\035\017\031\033\032\041\041" +
    "\001\002\000\032\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3" +
    "\061\ufff3\001\002\000\022\004\036\005\034\006\033\007" +
    "\037\010\035\017\031\033\032\041\041\001\002\000\022" +
    "\004\036\005\034\006\033\007\037\010\035\017\031\033" +
    "\032\041\041\001\002\000\022\004\036\005\034\006\033" +
    "\007\037\010\035\017\031\033\032\041\041\001\002\000" +
    "\022\004\036\005\034\006\033\007\037\010\035\017\031" +
    "\033\032\041\041\001\002\000\022\004\036\005\034\006" +
    "\033\007\037\010\035\017\031\033\032\041\041\001\002" +
    "\000\022\004\036\005\034\006\033\007\037\010\035\017" +
    "\031\033\032\041\041\001\002\000\052\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022\uffe2\023" +
    "\060\024\050\025\043\026\053\027\056\030\051\031\uffe2" +
    "\032\uffe2\045\uffe2\051\uffe2\056\uffe2\060\uffe2\001\002\000" +
    "\052\011\057\012\047\013\055\014\044\015\042\016\054" +
    "\020\uffe9\022\uffe9\023\060\024\050\025\043\026\053\027" +
    "\056\030\051\031\045\032\046\045\uffe9\051\uffe9\056\uffe9" +
    "\060\uffe9\001\002\000\052\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\020\uffde\022\uffde\023\060\024\050" +
    "\025\043\026\053\027\056\030\051\031\uffde\032\uffde\045" +
    "\uffde\051\uffde\056\uffde\060\uffde\001\002\000\052\011\uffe7" +
    "\012\uffe7\013\055\014\044\015\042\016\054\020\uffe7\022" +
    "\uffe7\023\060\024\050\025\043\026\053\027\056\030\051" +
    "\031\uffe7\032\046\045\uffe7\051\uffe7\056\uffe7\060\uffe7\001" +
    "\002\000\052\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\042" +
    "\016\054\020\uffe4\022\uffe4\023\060\024\050\025\043\026" +
    "\053\027\056\030\051\031\uffe4\032\uffe4\045\uffe4\051\uffe4" +
    "\056\uffe4\060\uffe4\001\002\000\052\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\023\060" +
    "\024\050\025\043\026\053\027\056\030\051\031\uffe0\032" +
    "\uffe0\045\uffe0\051\uffe0\056\uffe0\060\uffe0\001\002\000\052" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020" +
    "\uffdd\022\uffdd\023\060\024\050\025\043\026\053\027\056" +
    "\030\051\031\uffdd\032\uffdd\045\uffdd\051\uffdd\056\uffdd\060" +
    "\uffdd\001\002\000\052\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\020\uffe1\022\uffe1\023\060\024\050\025" +
    "\043\026\053\027\056\030\051\031\uffe1\032\uffe1\045\uffe1" +
    "\051\uffe1\056\uffe1\060\uffe1\001\002\000\052\011\057\012" +
    "\047\013\055\014\044\015\042\016\054\020\uffe8\022\uffe8" +
    "\023\060\024\050\025\043\026\053\027\056\030\051\031" +
    "\045\032\046\045\uffe8\051\uffe8\056\uffe8\060\uffe8\001\002" +
    "\000\052\011\uffdb\012\uffdb\013\055\014\044\015\042\016" +
    "\054\020\uffdb\022\uffdb\023\060\024\050\025\043\026\053" +
    "\027\056\030\051\031\uffdb\032\046\045\uffdb\051\uffdb\056" +
    "\uffdb\060\uffdb\001\002\000\052\011\057\012\047\013\055" +
    "\014\044\015\042\016\054\020\uffdc\022\uffdc\023\060\024" +
    "\050\025\043\026\053\027\056\030\051\031\045\032\046" +
    "\045\uffdc\051\uffdc\056\uffdc\060\uffdc\001\002\000\052\011" +
    "\uffe6\012\uffe6\013\055\014\044\015\042\016\054\020\uffe6" +
    "\022\uffe6\023\060\024\050\025\043\026\053\027\056\030" +
    "\051\031\uffe6\032\046\045\uffe6\051\uffe6\056\uffe6\060\uffe6" +
    "\001\002\000\052\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\020\uffdf\022\uffdf\023\060\024\050\025\043" +
    "\026\053\027\056\030\051\031\uffdf\032\uffdf\045\uffdf\051" +
    "\uffdf\056\uffdf\060\uffdf\001\002\000\022\004\036\005\034" +
    "\006\033\007\037\010\035\017\031\033\032\041\041\001" +
    "\002\000\040\011\057\012\047\013\055\014\044\015\042" +
    "\016\054\022\100\023\060\024\050\025\043\026\053\027" +
    "\056\030\051\031\045\032\046\001\002\000\052\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\045\uffe5\051\uffe5\056\uffe5\060\uffe5\001" +
    "\002\000\052\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\020\uffda\022\uffda\023\060\024\050\025\043\026" +
    "\053\027\056\030\051\031\uffda\032\uffda\045\uffda\051\uffda" +
    "\056\uffda\060\uffda\001\002\000\040\011\057\012\047\013" +
    "\055\014\044\015\042\016\054\020\103\023\060\024\050" +
    "\025\043\026\053\027\056\030\051\031\045\032\046\001" +
    "\002\000\052\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\045\uffe3\051\uffe3" +
    "\056\uffe3\060\uffe3\001\002\000\006\042\ufff4\046\025\001" +
    "\002\000\004\042\106\001\002\000\004\043\107\001\002" +
    "\000\004\044\110\001\002\000\022\004\036\005\034\006" +
    "\033\007\037\010\035\017\031\033\032\041\041\001\002" +
    "\000\040\011\057\012\047\013\055\014\044\015\042\016" +
    "\054\023\060\024\050\025\043\026\053\027\056\030\051" +
    "\031\045\032\046\045\112\001\002\000\032\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\050\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\057\ufff6\061\ufff6\001\002\000\040\011" +
    "\057\012\047\013\055\014\044\015\042\016\054\023\060" +
    "\024\050\025\043\026\053\027\056\030\051\031\045\032" +
    "\046\056\114\001\002\000\010\053\uffea\057\115\061\uffea" +
    "\001\002\000\022\004\036\005\034\006\033\007\037\010" +
    "\035\017\031\033\032\041\041\001\002\000\006\053\120" +
    "\061\ufff0\001\002\000\004\061\122\001\002\000\022\036" +
    "\015\037\016\040\020\041\023\050\014\052\ufffd\055\017" +
    "\061\ufffd\001\002\000\006\052\ufff1\061\ufff1\001\002\000" +
    "\032\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\050\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\057\uffec\061\uffec\001" +
    "\002\000\040\011\057\012\047\013\055\014\044\015\042" +
    "\016\054\023\060\024\050\025\043\026\053\027\056\030" +
    "\051\031\045\032\046\060\124\001\002\000\004\051\125" +
    "\001\002\000\024\036\015\037\016\040\020\041\023\050" +
    "\014\053\ufffd\055\017\057\ufffd\061\ufffd\001\002\000\010" +
    "\053\uffea\057\115\061\uffea\001\002\000\006\053\uffeb\061" +
    "\uffeb\001\002\000\040\011\057\012\047\013\055\014\044" +
    "\015\042\016\054\023\060\024\050\025\043\026\053\027" +
    "\056\030\051\031\045\032\046\051\131\001\002\000\024" +
    "\036\015\037\016\040\020\041\023\050\014\052\ufffd\053" +
    "\ufffd\054\ufffd\055\017\001\002\000\010\052\uffed\053\uffed" +
    "\054\133\001\002\000\022\004\036\005\034\006\033\007" +
    "\037\010\035\017\031\033\032\041\041\001\002\000\006" +
    "\052\ufff0\053\120\001\002\000\010\052\uffed\053\uffed\054" +
    "\133\001\002\000\006\052\uffee\053\uffee\001\002\000\004" +
    "\052\140\001\002\000\032\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\050\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\057\ufff2\061\ufff2\001\002\000\040\011\057\012\047\013" +
    "\055\014\044\015\042\016\054\023\060\024\050\025\043" +
    "\026\053\027\056\030\051\031\045\032\046\051\142\001" +
    "\002\000\024\036\015\037\016\040\020\041\023\050\014" +
    "\052\ufffd\053\ufffd\054\ufffd\055\017\001\002\000\010\052" +
    "\uffef\053\uffef\054\uffef\001\002\000\004\002\uffff\001\002" +
    "\000\016\035\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\061" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\016\004\010\005\007\006\012\007\020\010\021" +
    "\013\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\144\005\007\006\012\007\020\010\021\013\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\026\001" +
    "\001\000\002\001\001\000\004\014\037\001\001\000\004" +
    "\014\101\001\001\000\004\014\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\074\001\001\000\004\014\073" +
    "\001\001\000\004\014\072\001\001\000\004\014\071\001" +
    "\001\000\004\014\070\001\001\000\004\014\067\001\001" +
    "\000\004\014\066\001\001\000\002\001\001\000\004\014" +
    "\065\001\001\000\004\014\064\001\001\000\004\014\063" +
    "\001\001\000\004\014\062\001\001\000\004\014\061\001" +
    "\001\000\004\014\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\115\001\001\000\004\014" +
    "\122\001\001\000\004\011\116\001\001\000\002\001\001" +
    "\000\016\004\120\005\007\006\012\007\020\010\021\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\125\005\007\006" +
    "\012\007\020\010\021\013\011\001\001\000\004\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\131\005\007\006\012\007\020\010\021\013\011\001\001" +
    "\000\006\012\134\016\133\001\001\000\004\014\140\001" +
    "\001\000\004\011\136\001\001\000\006\012\134\016\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\142\005\007\006\012" +
    "\007\020\010\021\013\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= t_inicio INSTRUCCIONESP t_fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONESP ::= INSTRUCCION INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONESP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= comentarioSimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= comentarioMultiple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= ingresar identificador LISTANOMBRES como tipoDato conValor EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTANOMBRES ::= coma identificador LISTANOMBRES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTANOMBRES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTANOMBRES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTANOMBRES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= identificador LISTANOMBRES flecha EXPRESION puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SI ::= si EXPRESION entonces INSTRUCCIONESP LISTACONDICIONES DELOCONTRARIO finSi 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DELOCONTRARIO ::= deLoContrario INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DELOCONTRARIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELOCONTRARIO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OSI ::= oSi EXPRESION entonces INSTRUCCIONESP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OSI",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTACONDICIONES ::= OSI LISTACONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACONDICIONES",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTACONDICIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACONDICIONES",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SEGUN ::= segun EXPRESION hacer LISTASEGUN DELOCONTRARIO finSegun 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTASEGUN ::= interrogacionAbre EXPRESION interrogacionCierra entonces INSTRUCCIONESP LISTASEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASEGUN",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTASEGUN ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASEGUN",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION dividido EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION potencia corcheteAbre EXPRESION corcheteCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= parentesisAbre EXPRESION parentesisCierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION menorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION mayorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION esIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION esDiferente EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= caracter 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
